@startuml
autoactivate on
actor SpielerA


participant LoginView as "SpielerA: LoginView"
participant GameView as "SpielerA: GameView"
participant MQTTClient as "SpielerA: MQTTClient"


SpielerA -> LoginView : login_click
LoginView -> MQTTClient** : new MQTTClient()
LoginView -> MQTTClient : Connect(address, port, username, password)
MQTTClient --> LoginView : connected
LoginView -> MQTTClient : PublishLoginPayload(LoginPayload)
MQTTClient -> MQTTClient : Subscribe("/lobby")
MQTTClient ---> MQTTClient 
MQTTClient -> MQTTClient : Publish(LoginPayload.json)
MQTTClient --> MQTTClient
MQTTClient --> LoginView
LoginView --> SpielerA 

actor SpielerB

SpielerB -> MQTTClient : OnLoginMessage(LoginPayload)
MQTTClient -> MQTTClient : SetOpponentID(LoginPayload.opponent-id)
MQTTClient --> MQTTClient
MQTTClient -> LoginView : ChangeToGameView()
MQTTClient <-- LoginView
MQTTClient -> MQTTClient : Unsubscribe("/lobby")
MQTTClient --> MQTTClient
MQTTClient -> MQTTClient : Subscribe("/game")
MQTTClient --> MQTTClient
SpielerB <-- MQTTClient

SpielerA -> GameView: commit_turn()
GameView -> MQTTClient: PublishGameMessage(GamePayload.json)
MQTTClient -> MQTTClient: Publish(GamePayload.json, "/game")
MQTTClient --> MQTTClient
MQTTClient --> GameView
GameView -> GameView: UpdateGameView(GamePayload)
GameView --> GameView
GameView -> GameView: BlockGameView()
GameView --> GameView
GameView --> GameView

SpielerA <-- GameView

SpielerB -> MQTTClient: OnGamePayloadReceived(GamePayload)
MQTTClient -> GameView: UpdateGameView(GamePayload)
GameView -> GameView: UnblockGameView()
GameView --> GameView
MQTTClient <-- GameView
MQTTClient --> SpielerB
@enduml
